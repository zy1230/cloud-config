一些知识点：

1、断点调试：

   首先在代码行最旁边。即表示行数的数字那，双击即可设置断点。

   设置好后，再点击debug，先进入debug模式，进入之后再点击debug，进行断点调试。


――――――――――――――――――――――――――――――――――――――――――――


2、this关键字：

   一、this关键字主要有三个应用：

       (1)this调用本类中的属性，也就是类中的成员变量；

       (2)this调用本类中的其他方法；

       (3)this调用本类中的其他构造方法，调用时要放在构造方法的首行。

   Public Class Student {

            String name; //定义一个成员变量name

            private void SetName(String name){ //定义一个参数(局部变量)name

                           this.name=name; //将局部变量的值传递给成员变量

             }
          }

       this关键字除了可以引用变量或者成员方法之外，还有一个重大的作用就是返回类的引用。

如在代码中，可以使用return this，来返回某个类的引用。此时这个this关键字就代表类的名称。


――――――――――――――――――――――――――――――――――――――――――――


3、关于for的增强循环：

  for(String name:nameArray){
                      System.out.print(name+" ");
                  }
编译器会认为：

          1.创建名称为name的String变量。

          2.将nameArray的第一个元素赋给name。

          3.执行重复的内容。

          4.赋值给下一个元素name。

          5.重复执行至所有的元素都被运行为止


3、递归：

        指的是一个函数不断调用自身的行为。

  递归结构：

          1：递归尽头:什么时候不调用自己，如果没有头，将陷入死循环

             常见的递归头 ：就是――if判断

          2：递归体

             什么时候需要调用自身方法。

注意：就算没有递归头，java中递归不会无限的递归下去，递归太深，堆栈内存会溢出

比如：

    求阶乘：!5 = 1*2*3*4*5
 
    public static int J(int a){

        if(a==1){
                return 1;
         }
     return a*J(a-1);
}

  J(1)=1

  J(2)=2*1;
  
  J(3)=3*J(2),J(2)=2*1,――J(3)=3*2*1;

  ------

――――――――――――――――――――――――――――――――――――――――――


4、一些关于java面向对象的高级特性：

   1、继承和派生：

                继承是利用已有的基类（父类）派生出新的派生类（子类），对基类进行功能的扩充，

派生类可以不用定义而直接使用继承基类中的属性和方法，当然在此基础上派生类通常要添加一些新的属性

和方法，以满足新的设计需求。

   2、关键字―― “ this ”和“ super ”：

                this的概念：this表示当前正在创建的对象本身，通常使用this来引用本类中定义的成员变量

或成员方法，用以区别同名的形参变量、同名的局部变量等。

                super的概念super表示当前类的父类空间，用以引用父类中和子类同名的成员变量和成员方法、

以及构造方法等。

！！！！！！注意：

                  

1.static修饰的方法是静态方法，在静态方法中不能引用this。（this是调用这个函数的对象

的引用，而静态方法是属于类的，不属于对象，类加载的时候即加载，当静态方法成功加载后，对象还不一定存在。

                  

2.this（）和super（）都可以调用构造方法，this（）调用本类中的其他构造方法，

而super（）是调用父类中的构造方法。



                  3.this（）和super（）调用构造方法时，不能同时出现，因为this（）和super（）

都需要放在构造方法体中的首行。

   3、关键字：final

                一、final的基本知识：



                        1.final的本义是“最终”，final可以修饰变量、一般方法和类 。

                        

2.final修饰变量，表示变量一旦获取了初始值就不能被修改；



                        3.final修饰方法，表示该方法在派生子类中不能被重写，只能引用；

                        

4.final修饰类，表示该类不能派生出子类。

                二、final的方法：

                        final方法可以实现重载。

例子：

      class P{

          public final void m(){

                   System.out.println("yudks");
          }  
      }

      public class H extends P{

            public static void main(String [] args){
      
                  H a=new H();

                  a.m(2);
            }

           public final void m(int x){

                   System.out.println(x);
          }
      }

  
   4、转型和多态：

             一、转型的特点：

                      1.上转型的对象可以调用继承的所有成员，也可以调用被隐藏的父类中的成员变量。

                      2.上转型调用重写方法时，调用的是子类中的重写方法，而不是父类中的同名方法。

                      3.上转型对象不能调用子类中新增的成员变量和成员方法。


  5、抽象类和接口：

          一、抽象类的概念：抽象类通过定义抽象方法既可以不去管方法的实现，又可以实现类的多态。

抽象方法只有方法的声明，即方法的方法头，而没有方法的实现，即方法体。



              抽象类：

                     1.抽象类可以包含成员变量、一般方法（有方法体）、抽象方法、构造方法，

抽象类拥有构造方法也不能创建实例，只能被其子类调用来初始化继承的父类成员。

                     2.抽象类对象可以作为上转型对象，实现类的多态机制。

          二、接口的概念：Java通过接口实现多种类别的交叉特性 。新的JDK8中对接口进行了改进，

允许接口中定义默认方法，默认方法可以有方法实现。（default）

             接口回调：      List <String> list1 = new ArrayList<String>()  

                          
声明接口的对象变量“ List <String> list1 ”，然后引用实现该接口的类所创建的对象 

“ new ArrayList<String>() ”，那么接口变量就可以调用被类实现的接口中的方法，当接口变量调用接口中的方法时，

就是通知相应的实现类对象去调用实现接口中的方法，这一过程就是接口回调。

          三、抽象类和接口的相同和不同

相同点有：

             

1.都包含抽象方法，这些方法在继承抽象类或实现接口的类中都要具体实现，如果有一个不实现，

该类就是抽象类，还是不能创建实例对象。



             2.抽象类和接口都包含抽象方法，不能用new创建对象实例，两者都可以引用继承抽象类

或实现接口的类，调用重写或实现的抽象方法，并通过上转型对象或接口回调方式实现多态机制。

   6、

内部类的概念：



          1.如果一个类A的内部定义了一个类B，那么类A称为外部类或外嵌类，而类B称为内部类或内嵌类 。



          2.内嵌类可以定义在类的内部，也可以定义在类成员方法的内部，此时称为局部内部类。



例子：

      class C{

                  //成员内部类
         
        
            （private） class B {   //成员内部类,设为私有

                      void show(){
                                    System.out.println("sdfjh");

                      }
                   }

                  public void show1() {
        
                 //局部内部类

                       class D{

        
                               }

         }
     }

        public class niming {
    

               public static void main(String[]args) {
        

                         //创建对象访问对应内部类函数成员
        

                         C.B b=new C().new B();
        

                         b.show();
    

                }
        
}

成员内部类的访问格式：

                    外部类名.内部类名 对象名=外部类对象.内部类对象

     内部类的特性：



                1.内部类可以访问所在外部类的所有成员，包括私有成员。
 
                

2.外部类必须通过内部类对象可以访问内部中的私有成员。



                3.局部内部类也可以访问外部类的所有成员，包括私有成员。

   7、匿名对象和类：

                

一、概念：匿名对象是指没有栈引用的对象，即创建一个对象，并没有给出名字的对象，

匿名对象不分配栈空间，只有堆空间，通过new关键字创建一个对象，但是没有分配栈对象变量来引用

该对象的内存空间，所以对象只能使用一次。



                二、类的匿名类的特性

                         

1.匿名类一定是一个内部类，匿名类可以访问外嵌类中的成员变量和方法。



                         2.匿名类创建的匿名对象一般作为一个参数进行传递。


     
                         3.匿名类中不能定义静态成员变量和方法。?
   8、泛型类：

                

一、泛型类的知识

： 
                        
                                1.增加泛型（generic）在很大程序上是为了让集合能存放多种数据类型，

并在操作过程中记住这些数据类型。



                                2.用户可以按自己的需求制定集合要操作的数据类型，可以让程序员定义

安全的类型，引入泛型使得编程变得更为简单。

                                

3.集合对类型没有限制，这可能引起ClassCastException异常。?

?




――――――――――――――――――――――――――――――――――――――――――――》



另：
      ◇◇◇  匿名类  ◇◇◇
    
           1、匿名类，就是没有名称的类，其名称由Java编译器给出，一般是形如：外部类名称+$+匿名类顺序，

没有名称也就是其他地方就不能引用，不能实例化，只用一次，当然也就不能有构造器。

           2、匿名类就是利用父类的构造函数和自身类体构造成一个类。

        格式：

             new 父类/接口/抽象类(){

                         子类内容

             }

           3、上面格式中的“父类”是子类需要继承或者实现外部的类或者接口

           4、匿名类可以继承父类的方法，也可以重写父类的方法。

           5、匿名类可以访问外部类的成员变量和方法，匿名类的类体不可以声明称static成员变量和

static方法。

           6、匿名类由于是一个new的结果，所以其实可以赋值给一个父类对象。因此可以分为两种匿名类，

成员匿名类和局部匿名类（作为函数参数）

例子：
        class Outer{
   
                 void show() {
                     
                        System.out.println("run in Outer");
                 }
           }

     public class Demo {
    
          public static void main(String args[]) {
        
                   Outer ot = new Outer(){
        
                                           void show() {
                     
                                                  System.out.println("run in Inner");
                                           
                                            }
                                };
    
                  ot.show();//run in Inner
          }
     }


――――――――――――――――――――――――――――――――――――――――――――


另：

  关于打印对象的地址：
 
         public class H{

             public static void main(String [] args){
 
                H s=new H();

                s.a();
            }

            public void a(){

                 System.out.println(this);
            }
          }

上面打印的是地址：

                这里其实调用的是toString()方法，而toString方法就是在object类中去打印对象地址。

           public String toString(){

                    return "sajdhf,fgulwef";
           }
    

当加了上面的地址，其实相当于重新写了toString方法。此时就不再是调用打印地址的方法，而是子类重新写

的方法。



   
――――――――――――――――――――――――――――――――――――――――――――
   
1、关于类、抽象类、接口作为方法参数和返回值：

                     ◇ ◇ ◇ 类作为方法参数与返回值 ◇ ◇ ◇

   ◇ 类做方法参数：

      即方法要接受一个类类型，要向方法传入该类的对象。

例子：

    public class A{

       public static void main(String [] args){
      
           A a=new A();

           a.m(a);
        }

      public void m(A a){  //创建A对象

             //这里也可以参数也可以写( Object a )

             // Object类是所有类的父类，表示向上转型了，Object a = new A();

             //这个是可以的

        System.out.println("sajfa");
     }
}

   ◇ 类作为函数的返回值：

      这个方法表示要返回该类的对象。

例：

    class P{

      public void w(H a){

             System.out.println("smhfv");
       }
     }


    public class H{

       public static void main(String [] args){
      
           P o=new P();

           o.w(m());
        }

   
       public static H m(){

           H a=new H(); （H是类名）

           return a; //返回的值是H类的对象
  
      }

    }

                ◇ ◇ ◇抽象类作为方法参数与返回值 ◇ ◇ ◇

   ◇ 抽象类作为方法参数

      开发中，抽象类作为方法参数的情况也很多见。当遇到方法参数为抽象类类型时，

要传入一个实现抽象类所有抽象方法的子类对象。

例：

   abstract class P{

      public void w(P a){  //该方法参数为抽象类P类型

           System.out.println("smhfv");
     }
   }
   public class H extends P{  //

      public static void main(String [] args){
      
           P o=new H(); //抽象类引用的指向实现抽象类所有抽象方法的子类对象

           o.w(o);
        }
   }






   ◇抽象类作为方法返回值

     抽象类作为方法返回值的情况，也是有的，这时需要返回一个实现抽象类所有抽象方法的子类对象。





                ◇ ◇ ◇ 接口作为方法参数与返回值 ◇ ◇ ◇


   ◇ 接口作为方法参数

      接口作为方法参数的情况是很常见的，经常会碰到。当遇到方法参数为接口类型时，那么该方法要传入

一个接口实现类对象。






   ◇ 接口作为方法返回值

      接口作为方法返回值的情况，在后面的学习中会碰到。当遇到方法返回值是接口类型时，那么该方法需要

返回一个接口实现类对象。 


      

      

   ◇  ◇  ◇ 常用API：

   Java 的API（API: Application(应用) Programming(程序) Interface(接口)）就是JDK中提供给我们

使用的类，这些类将底层的代码实现封装了起来。



――――――――――――――――――――――――――――――――――――――――――――――


               ◇  ◇  ◇ 关于JDBC连接数据库 ◇  ◇  ◇ 

  1、关于JDBC：

             （ Java Database Connectivity  java数据库连接）是 一 种可用于执行 SQL 语句的 

Java API(Application Programming Interface， 应用程序设计接口)。

它由一些 Java 语言编写的类和接口组成。

              它的存在在JAVA程序与数据库系统之间建立了一条通信的渠道。

  2、JDBC的六大步骤：

                   一、注册驱动

                   二、获取连接

                   三、获取执行sql语句对象

                   四、执行sql语句

                   五、处理结果集

                   六、关闭资源


          一、注册驱动：

                        1）、一般情况下，在应用程序中进行数据库连接，调用JDBC接口，

首先要将特定厂商的JDBC驱动实现加载到系统内存中，然后供系统使用。

                        2）、驱动载入内存的过程：
 
                             这里所谓的驱动，其实就是实现了java.sql.Driver接口的类。

如oracle的驱动类是 oracle.jdbc.driver.OracleDriver.class（此类可以在oracle提供的JDBC jar包中找到），

此类实现了java.sql.Driver接口。

　　                    由于驱动本质上还是一个class，将驱动加载到内存和加载普通的class原理是一样的:

使用Class.forName("driverName")。

                        class类的方法：forName() 的主要功能：
                  
                                  Class.forName(xxx.xx.xx)返回的是一个类

                                  Class.forName(xxx.xx.xx)的作用是要求JVM查找并加载指定的类，

                                  也就是说JVM会执行该类的静态代码段

      即：
 
          在连接数据库之前先加载驱动：

                           //加载Oracle数据库驱动 

                        Class.forName("oracle.jdbc.driver.OracleDriver"); 
   
                           //加载SQL Server数据库驱动
 
                        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver"); 
   
                           //加载MySQL 数据库驱动 

                        Class.forName("com.mysql.jdbc.Driver");

           （class.forName()返回的是类，要求就是JVM查找加载相关的类，且会执行该类的静态代码：

在JDBC规范中明确要求这个Driver类必须向DriverManager注册自己，即任何一个JDBC Driver的 Driver类的代码

都必须类似如下：
              
             public class MyJDBCDriver implements Driver {

                    static {

                           DriverManager.registerDriver(new MyJDBCDriver());

                     }

               }

                    既然在静态初始化器的中已经进行了注册，所以我们在使用JDBC时只需要

Class.forName(XXX.XXX);就可以了。

             Class.forName()将对应的驱动类加载到内存中，然后执行内存中的static静态代码段，

代码段中，会创建一个驱动Driver的实例，放入DriverManager中，供DriverManager使用。



      以oracle数据库为例：

              在使用Class.forName() 加载oracle的驱动oracle.jdbc.driver.OracleDriver时，

会执行OracleDriver中的静态代码段，创建一个OracleDriver实例，然后调用DriverManager.registerDriver()

注册。

                  

                      3）、 java.sql.Driver接口规定了Driver应该具有以下功能：

    部分比较重要的方法：

          ◇ ◇  返回值类型   方法名

                 boolean      acceptsURL(String url)
       
                              查询驱动程序是否认为它可以打开给定URL的连接。

                 connection   connect(String url,Properties info)

                              试图创建一个给定URL的数据库连接（返回一个连接，这样才能去连接数据库）

  Oracle url：

            jdbc:oracle:thin:@localhost:1521:SID

            jdbc:oracle:thin:@//localhost:1521:SERVICENAMED

   这个协议的解释：

         thin：小型驱动，驱动方式

         localhost 本机ip地址 127.0.0.1

         1521 oracle数据库的端口号

         SID：数据库的SID

         SERVICENAME：数据库的SI

   MySQL URL：jdbc:mysql://localhost:3306/数据库名称 （ 3306是mysql的端口号。）

                       4）、DriverManager角色

         事实上，一般我们操作Driver，获取Connection对象都是交给DriverManager统一管理的。

DriverManger可以注册和删除加载的驱动程序，可以根据给定的url获取符合url协议的驱动Driver或者是

建立Conenction连接，进行数据库交互。

         DriverManager 的部分重要方法：

                   ◇ ◇      返回值类型       方法名
         
                      static  void             deregisterDriver(Drive driver)

                                               从DriverManager的列表中删除一个驱动程序

                      static  Connection       getConnection(String url)

                                               试图建立到给定数据库URL的连接

                      static  Connection       getConnection(String url,Properties info)

                                               试图建立到给定数据库URL的连接

                      static  Connection       getConnection(String url,String user,String password)

                                               试图建立到给定数据库URL的连接


 //上面3个方法返回值类型都是connection，而connection是接口，所以说明上面返回的都是connection接口。


                      static  void             registerDriver(Driver driver)

                                               向DriveManager注册给定驱动程序

       所以注册驱动有两种方法：

            try{

                         //第一种方式：类加载(常用)
            
                    Class.forName("oracle.jdbc.OracleDriver");

                        //第二种方式：利用Driver对象

                      Driver driver = new OracleDriver();
            
                      DriverManager.registerDriver(driver);


          二、获取连接：

                       //第一种方式：利用DriverManager（常用）
            
              //connect = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:SID名称", 

"你的oracle数据库用户名", "用户名密码");

                      //第二种方式：直接使用Driver
            
               Properties pro = new Properties(); 

            //Properties 类继承于 Hashtable。表示一个持久的属性集，属性列表以key-value的形式存在，

key和value都是字符串。
           
               pro.put("user", "你的oracle数据库用户名");
            
               pro.put("password", "用户名密码");
            
               connect = driver.connect("jdbc:oracle:thin:@localhost:1521:XE", pro);

！！！注意：

     这些语句只是放在了try catch语句，之前已经定义：

                                           Connection connect = null;

                  在这一步中，获取到Connection连接。
        
                                           Statement statement = null;
        
                                           ResultSet resultSet = null;

                  这3个都是接口，Connection 、Statement 、ResultSet 都是接口

                  //测试connect正确与否
            
               System.out.println(connect);  

          三、获取执行sql语句对象：

要执行SQL语句，必须获得java.sql.Statement实例，Statement实例分为以下3种类型：    
      
                      1、执行静态SQL语句。通常通过Statement实例实现。    
      
                      2、执行动态SQL语句。通常通过PreparedStatement实例实现。    
      
                      3、执行数据库存储过程。通常通过CallableStatement实例实现。

        这是第三种的代码：（CallableStatement cstmt = con.prepareCall("{CALL demoSp(? , ?)}") ;  

                 
                         //第一种方式:statement
            
                  statement = connect.createStatement();

            执行静态SQL语句，通过statement实例实现

            另外，上面已经定义了 Statement statement = null;

                        //第二种方式：PreStatement
            
    PreparedStatement preState = connect.prepareStatement("select  * from tb1_dept where id = ?");



          四、执行sql语句：

Statement接口提供了三种执行SQL语句的方法：executeQuery 、executeUpdate、和execute
    
              1、ResultSet executeQuery(String sqlString)：执行查询数据库的SQL语句，

返回一个结果集（ResultSet）对象。    
     
              2、int executeUpdate(String sqlString)：用于执行INSERT、UPDATE或

DELETE语句以及SQL DDL语句，如：CREATE TABLE和DROP TABLE等    
              
              3、execute(sqlString):用于执行返回多个结果集、多个更新计数或二者组合的语句。    

              
                    //第一种方式：

            //resultSet = statement.executeQuery("select  * from tb1_dept");

                  从上面知道，executeQuery(String sqlString)返回的值是ResultSet接口

            上面已经定义了：

                           ResultSet resultSet = null;

                    //第二种方式：

            preState.setInt(1, 2);//1是指sql语句中第一个？,  2是指第一个？的values值

            //resultSet = preState.executeQuery();        //执行查询语句


            //查询任何语句，如果有结果集，返回true，没有的话返回false,注意如果是插入一条数据的话，

虽然是没有结果集，返回false，但是却能成功的插入一条数据

            boolean execute = preState.execute();

            System.out.println(execute);


          五、处理结果集  resultSet

      1）、ResultSet包含符合SQL语句中条件的所有行，并且它通过一套get方法提供了对这些行中数据的访问。

get方法： 

          getInt、getString等等
    
      2）、使用结果集（ResultSet）对象的访问方法获取数据：

          
           while (resultSet.next())

            {
                int id = resultSet.getInt("id");

                String name = resultSet.getString("name");

                String city = resultSet.getString("city");

                System.out.println(id+"   "+name+"   "+city);  //打印输出结果集
            }
        } catch (Exception e) {

                     e.printStackTrace();

        }finally {


          六、关闭资源

处理异常，关闭JDBC对象资源：
   
     操作完成以后要把所有使用的JDBC对象全都关闭，以释放JDBC资源，关闭顺序和声明顺序相反：
    
     1、先关闭resultSet 
   
     2、再关闭Statement或preparedStatement，看你用的是什么
  
     3、最后关闭连接对象connection 

在finally里写这些，必须要每个都判断，不然还是会报错。  
 
          try{

            rs.close();

           }catch(SQLException e){
    
               System.out.println(e);
              }
           try{

            st.close();

           }catch(SQLException e){
    
               System.out.println(e);
          }
            try{

            conn.close();

           }catch(SQLException e){
    
               System.out.println(e);
          }
注意：


     在用到这些资源，要先引入相应的包：

     例如：

          你要连接Oracle数据库：

                 import oracle.jdbc.driver.OracleDirver

                 OracleDriver类实现了oracle数据库连接的驱动的加载

          要用到sql包里的许多类，可整个包引入：

                 import java.sql.*;

          还有一个用到了Properties 类，key-values键值对，用在用户名和密码上，也要引入：

                 import java.util.Properties;

          等等

完整代码：

         见SqlDemo.java文件

另外：

    在建立连接前，要做几件事：
                       
                第一：打开数据库的服务：OracleServiceORC

                第二：打开监听服务：OracleDb11g_home1TNSLister，这个一定要打开，否则无法建立连接。

    这两个服务打开后就可以进行连接

                另外如果报错找不到Oracle.jdbc.driver包不存在，则要先将该包加入java项目中，首先

该包在：D:\myoracle\oracle\product\11.2.0\dbhome_1\jdbc\lib

        找到ojdbc6.jar

        将这个包加入到java项目里去

右击java项目，选择“Build Path”、“Configure Build Path”，

单击“Add External JARs”按钮，选择你的ojdbc6.jar；

      

然后就可以连接到数据库。




―――――――――――――――――――――――――――――――――――――――――――――》 

           

               ◇  ◇  ◇ Lambda表达式 ◇  ◇  ◇ 

这个是java8的新特性之一。

   1、Lambda：

           Lambda简化了匿名内部类的写法。Java8中可以通过类型推断来判断出用户的意图，

不必将类型等信息写全。特别是方法实现体中只有一句语句的实现类，更能加大简化力度。

注意：

        Lambda表达式只能针对函数式接口使用（函数式接口：接口里只有一个抽象方法），

使用注解(@FunctionalInterface)可以强制接口是函数式接口。

   2、Lambda表达式的使用前提：

                 必须存在一个接口, 接口中有且只有一个抽象方法

                 该接口需要作为方法的参数列表

   3、    ->

     这个表达式分成左边和右边，左边是表示方法的参数，右边是方法要执行的内容。

例子：

     public class A {

          public static void main(String [] args){

               new B(){

                   public void m(){

                          System.out.println("hhhhhhhhhh");}

                    }.a();接口里默认方法只能在这里这样用，Lambda表达式不能用。

               B a=()->{ System.out.println("ooooooooo"); };
             
               a.m();     
          }     
      }

   interface B{

           public void m();

           default void a(){

                    System.out.println("iiiiiiiiiiiii");
           }
    }



――――――――――――――――――――――――――――――――――――――――――――――》



一些知识点的补充：

        1、面向对象和面向过程的区别：

面向过程：

　　优点：性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、

Linux/Unix等一般采用面向过程开发，性能是最重要的因素。

缺点：没有面向对象易维护、易复用、易扩展

面向对象：

　　优点：易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，

使系统更加灵活、更加易于维护

缺点：性能比面向过程低。
      
        2、java文件是怎样运行的：

        Java源代码---->编译器---->jvm可执行的Java字节码(即虚拟指令)---->jvm---->jvm中解释器----

-------->机器可执行的二进制机器码---->程序运行。

        3、什么是Java虚拟机：

　　    任何一种可以运行Java字节码的软件均可看成是Java的虚拟机（JVM）。

        4、什么是JDK?  什么是JRE？

　　            JDK: 顾名思义它是给开发者提供的开发工具箱,是给程序开发者用的。它除了包括完整的JRE

（Java Runtime Environment），Java运行环境，还包含了其他供开发者使用的工具包。

                JRE:普通用户而只需要安装JRE（Java Runtime Environment）来运行Java程序。

而程序开发者必须安装JDK来编译、调试程序。
    
        5、字符型常量和字符串常量的区别：

           1) 形式上:

               字符常量是单引号引起的一个字符

               字符串常量是双引号引起的若干个字符

           2) 含义上:

               字符常量相当于一个整形值(ASCII值),可以参加表达式运算

               字符串常量代表一个地址值(该字符串在内存中存放位置)

           3) 占内存大小

               字符常量只占一个字节

               字符串常量占若干个字节(至少一个字符结束标志)

        6、Java语言采用何种编码方案？有何特点？

　　           Java语言采用Unicode编码标准，Unicode（标准码），它为每个字符制订了一个唯一的数值，

因此在任何的语言，平台，程序都可以放心的使用。

        7、构造器Constructor是否可被override

　　           在讲继承的时候我们就知道父类的私有属性和构造方法并不能被继承，所以Constructor

也就不能被override，但是可以overload，所以你可以看到一个类中有多个构造函数的情况。

        8、String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的？

               String类中使用字符数组保存字符串，private　final　char　value[]，

所以string对象是不可变的。

               StringBuilder与StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中

也是使用字符数组保存字符串，char[]value，这两种对象都是可变的。

        9、自动装箱与拆箱

              装箱：将基本类型用它们对应的引用类型包装起来；

              拆箱：将包装类型转换为基本数据类型；
　　

              Java使用自动装箱和拆箱机制，节省了常用数值的内存开销和创建对象的开销，提高了效率，

由编译器来完成，编译器会在编译期根据语法决定是否进行装箱和拆箱动作。

        10、在一个静态方法内调用一个非静态成员为什么是非法的？

　　          由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以

访问非静态变量成员。

        11、在Java中定义一个不做事且没有参数的构造方法的作用

　　          Java程序在执行子类的构造方法之前，如果没有用super()来调用父类特定的构造方法，则会调用

父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有

用super()来调用父类中特定的构造方法，则编译时将发生错误，因为Java程序在父类中找不到没有参数的构造方法

可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。

        12、在调用子类构造方法之前会先调用父类没有参数的构造方法，其目的是？

　　          帮助子类做初始化工作。

        13、对象的相等与指向他们的引用相等，两者有什么不同？

　　          对象的相等 比的是内存中存放的内容是否相等而 引用相等 比较的是他们指向的内存地址是否相等。

        14、equals 和 == 的区别？

              1.==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的

内存空间的值是不是相同

              2.==是指对内存地址进行比较 equals()是对字符串的内容进行比较

              3.==指引用是否相同 equals()指的是值是否相同

        15、Java中垃圾回收有什么目的？什么时候进行垃圾回收？

              垃圾回收是在内存中存在没有引用的对象或超过作用域的对象时进行。

              垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。



――――――――――――――――――――――――――――――――――――――――――》



补充：

     1、接口：

             接口能被多继承，继承它的必须是接口，用关键字 extends 。
 
             如果是普通类（public class PuTong）或抽象类（abstract class ChouXiang），则需要用关键字

implements ，来实现它，不同的是，抽象类implements接口，并不需要实现它的方法，但抽象类它会得到接口所有

的抽象方法，别的普通类再继承该抽象类，则要实现所有抽象方法，包括从接口那得到的抽象方法。

             接口里的定义的方法，默认都是“ public abstract ”，你可以不用自己写这两个词，接口会自动

帮你加上。除了抽象方法，接口里，你定义“ 变量 ”，接口一样会给你自动加上：“ static fianl ”。实际就

是常量。

注意：常量要初始化，例如：static final int a;这是错误的，要给它赋值：static final int a=1230;

      它不是成员变量，static int a;可以不赋值，因为系统有给它默认的初始值0。

             接口里除了上面两个，后面又加了新的特性，比如，加了一种默认方法，该方法不是抽象方法，

有主体，( public ) default 方法名(){   }，不加 “ public ”没有关系，系统会给你加上“ public ”。

这个方法，你可以在实现类中，用实现类的对象去调用它，就是：

                 实现类      H a=new H();

                             a.m();  （ m()是这个default方法名 )

            Java8引入了一种新特性，为了使接口具有更大的灵活性，将接口静态方法来一个默认实现，

当然子类可以重写，也可以不重写。如下：

            

public interface Service{



                      public static int testMethod(int i){

 

                                            return i;

                      }

            

}

            

则这种情况是允许的，在实现类中可以进行覆盖testMethod(int i),也可以不进行覆盖。

            调用这个静态方法，只需要“ 接口名.静态方法名 ”，即：Service.testMethod(2);



――――――――――――――――――――――――――――――――――――――――――――――》



     2、关于数据类型：

        首先数据类型分为两种：

                             基本数据类型和引用类型

        一、基本数据类型有8种：byte   short   int   long 

                               float  double

                               char

                               boolean

            基本数据类型的存储区域是在栈内存中，类型名和类型值都存放在栈中，执行效率高。

       二、引用类型：

            这里要扯到对象。（引用对象）java是将两者分开的，引用类型名是存放在栈内存中的，而对象是放在

堆内存的。

           引用数据类型有：

                         数组

                         类

                         接口

 注意：

       String是一个类，类是引用数据类型。

       String类比较特殊的引用类型，它仿佛可以像基本数据类型那样 String a="aaa";然而它依然是引用了对象

，只不过它指向的是常量池中的“aaa”的地址，String的值一旦创建了并不能改变，所谓的“改变”只是指向了另

一个地址值。String a=new String("aaa");这个是创建了一个对象。


           在数据做为参数传递的时候，基本数据类型是值传递，引用数据类型是引用传递（地址传递）。

           值传递的时候，将实参的值，copy一份给形参。

           引用传递的时候，将实参的地址值，copy一份给形参。

延伸内容：

           自动装箱与拆箱机制

           基本类型的引入，虽然使得Java对初学者更友好，并能更高效处理基本数据类型了；但它同时也使

Java偏离了面向对象的基本思想。对于习惯了面向对象编程的开发者，很多时候，把基本类型转变成对象反倒

更有助于程序设计，甚至这种需求在一些情况下是必需。因此Java在SE5中引入了自动装箱与拆箱的机制。

           装箱机制：

                    Integer i = 100; (注意：不是 int i = 100; )

           实际上，执行上面那句代码的时候，系统为我们执行了：Integer i = Integer.valueOf(100); 

           这就是装箱机制的实现。

           拆箱机制：

                     Integer i = 10; //装箱 
 
                     int t = i; //拆箱，实际上执行了 int t = i.intValue()


另外再补充：

            1）、引用变量访问对象和调用数据域和方法:

           对象是通过对象类型变量来访问，该变量包含了对对象的引用。对象类型变量使用操作符（.）

来访问对象数据和方法。 

           创建的对象会在内存中分配空间，然后通过引用变量来访问。包含一个引用地址的变量就是引用变量，

即引用类型。 Java中，除了基本类型外，就是引用类型（对象）。

          声明对象类型变量的两种形式：

                     Fruit f ; //只声明，未指向一个引用地址
 
                     Fruit f = null; //f指向一个空地址

                     //两者基本无区别，null是引用类型的默认值

            2）、每一个变量都代表一个存储值的内存位置。 声明变量时，就是告知编译器该变量可以存储

什么类型的值。

                 除了基本类型，就是引用类型，引用类型包含对象引用，可以将引用类型看作对象。

                 所以，将引用类型变量赋值给另一个同类型引用变量，两者会指向同一个对象，而不是独立的

对象。 如果想要指向一个具有同样内容，但不是同一个对象，可以使用clone()方法。

                 如果不再需要某个对象时，也就是不引用该对象，可以将引用类型变量赋值null，

表示引用为空。 若创建的对象没有被任何变量所引用，JVM会自动回收它所占的空间。



――――――――――――――――――――――――――――――――――――――――――――――》


     3、this关键字的补充：

                         关键字this表示当前对象，引用对象自身。 可以用于访问实例的数据域， 

尤其是实例变量和局部变量同名时，进行分辨。除此之外，可以在构造方法内部调用同一个类的其他构造方法。

例子：

    public class A{

        static int a,b;

          public static void main(String [] args){

             A a=new A(12,30);
            
             System.out.println(a.a);

             System.out.println(a.b);  
          }

        public A(int a){
       
            this.a=a;  //this 关键字可以方便你辨别成员变量和局部变量，这里也可以直接写 a=a;但这样

                       不方便阅读
        }

        public A(int a,int b){

            this(a);  //可以直接调用构造方法1

            this.b=b;
        }

 }

注意：

       对this的调用必须是构造器中的第一个语句，super的调用也是。

       子类继承父类，其构造器默认有super，先对父类进行调用。

例子：

      public class A extends B{

          static int a,b;

          public static void main(String [] args){

                   A b=new A(12,30);
             
          }
           public A(int a){

            //super(); 这里写还是不写，都是有的
       
            a=a;
          }
           public A(int a,int b){

            this(a);//注意：this的调用要在第一行，super也要，所以两者不能共存，但这里调用的是上面
 
                      没有参数的构造方法，上面的构造方法默认是有super()
                             

            this.b=b;
        }

      }

class B{

      public B(){

              System.out.println("a");
      }
      void a(){

              System.out.println("sdhgmha");
      }

  }



――――――――――――――――――――――――――――――――――――――――――――――》


     4、集合：

            集合是java中提供的一种容器，可以用来存储多个数据。

            集合和数组既然都是容器，两者的区别：

                    数组固定长度不可变，集合是可变的；

                    数组可存放基本数据类型和引用类型，集合只能存放引用类型



―――――――――――――――――――――――――――――――――――――――――――――――

     5、关于java关键字的：

                  Java关键字是对Java编译器有特殊含义的字符串，是编译器和程序员的一个约定，程序员利用关键字来告诉

编译器其声明的变量类型、类、方法特性等信息。

                  像变量类型：基础数据类型 ：（byte short int long char flort double boolean）

                              引用类型 ：String

                  类的访问权限修饰符：public protected private 

                  还有修饰符：abstract static final default

                  方法返回值类型：void 

                  定义类：class 
     
                  定义包的：package

                  继承类的：extends  super(父类）

                  定义接口：interface

                  实现接口的：implements

                  导入包的：import

                  创建实例的：new

                  判断属于运算符：instanceof

                  用在线程里的：synchronized（表明一段代码需要同步执行）上锁

                  方法里面用的：try catch finally break continue for while do if else return switch case

                                throw throws this  

                  还有一些，总共有53个，51个关键字+2个保留字（const goto 无具体含义）

这些关键字都是可以声明的变量类型、类、方法特性等信息

关键字不能用作变量名、方法名、类名、包名和参数。


――――――――――――――――――――――――――――――――――――――――――――――――――――

  6、关于System类：

     我们常用的一条打印语句：System.out.println();

     System是java.lang包里的类，System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。

     由于该类的构造方法是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法

都是static的，所以也可以很方便的进行调用。

       1）、成员变量

       System类内部包含in、out和err三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流

(显示器)。其描述：public final class System extends Object

       这3个成员变量的描述是：

                 成员变量类型         变量名

             static PrintStream	       err

             static InputStream	       in

             static PrintStream	       out

       PrintStream类是java.io包里的。

       “ out ”在System类里是这样定义的：

            public static final PrintStream out=new PrintStream();

       所以这就是为什么out变量可以引用PrintStream类里的方法，因为它是指向PrintStream类的对象的。

       这也体现了java的“ 面向对象 ”的思想，System类就是一个对象，而“输出”是这个对象的一个方法。


――――――――――――――――――――――――――――――――――――――――――――――――――――

  7、关于java内存泄漏：

               Java的一个重要特性就是通过垃圾收集器(GC)自动管理内存的回收，而不需要程序员自己来释放内存。理论上

Java中所有不会再被利用的对象所占用的内存，都可以被GC回收，但是Java也存在内存泄露。

               在Java程序中，我们通常使用new为对象分配内存，而这些内存空间都在堆（Heap）上。

               JAVA 中的内存泄露：

               Java中的内存泄露，广义并通俗的说，就是：不再会被使用的对象的内存不能被回收，就是内存泄露。

               对象都是有生命周期的，有的长，有的短，如果长生命周期的对象持有短生命周期的引用，就很可能会出现

内存泄露。

               解决的原则就是尽量减小对象的作用域


――――――――――――――――――――――――――――――――――――――――――――――――――






































































































































































































