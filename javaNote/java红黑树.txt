

――――――――――――――――――――――――――――――――――――――――――――――――》


【】、关于红黑树的一些知识：

      1）、红黑树是一种含有红黑结点并能自平衡的二叉查找树。它必须满足下面性质：

           性质1：每个节点要么是黑色，要么是红色。

           性质2：根节点是黑色。

           性质3：每个叶子节点（NIL）是黑色。（为空（NULL)的节点）

           性质4：每个红色结点的两个子结点一定都是黑色。

           性质5：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。

      所以红黑树就能够保证最长路径最多是最短路径的两倍，也就是下面这种情况：

                                        就是一条全是黑色节点，另一条是红黑交加

      2）、红黑树的添加和删除是比较复杂的操作，因为它不是简单的插入和删除，它除了插入和删除之外还要保证其平衡：

这就要用到三个操作：左旋、右旋、变色

           （1）、左旋

                         80

                      |      |

                     40     100  （要左旋的节点）

                           |   |

                          110  120
                          

                   左旋后：

                         100

                      |      |

                     80     120  

                    |   |

                   40   110


         （2）、右旋：

                      120

                    |     |

   （要右旋的数字）100   150

                  |   |

                 80   110
                 
                |  |

               40  50

                右旋后：

                        100

                     |       |

                     80      120

                   |   |    |   |
           
                  40  50   110  150
 
            （3）、至于变色，就是找到插入的位置，还要判断是否红黑平衡来决定是否要变色

                   通常都是先变色后左旋或者右旋，因为它要满足红黑树的性质。（就上面5个性质）

      3）、红黑树的插入操作：

                         O    【 黑色（根节点必须为黑色）】

                    |        |

        【（红色）】O        O 【（红色）】 下面的节点就都要为黑色

                  |   |   |    |                 

                  O   O   O    O 【黑色】 【 刚好也能满足性质 5 】
                         
                          |    |
                         ―    ―
                        |  |  |  | （为空的叶子节点是黑色）
                         ―    ―

       注意：插入的数找到了节点进行插入也都是以红色节点先插入的，除非整棵树是空的，那它就是根节点了，只能是黑的。

             这样做是因为至少要满足性质5，就是尽量少破环这些性质去插入，不然后面会很麻烦。

       此外，再讲一下节点之间的叫法，后面插入好说：

                                  O  （祖父节点）

                              |       |

                 （叔叔节点)  O        O （父节点）

                            |   |   |    |                 

                            O   O   O    O  《――（以这个节点来说）子节点

                                    |    |
                                   ―    ―
                                  |  |  |  | 
                                   ―    ―

【】、它的插入操作分成很多情景：

     1）、如果整棵树都是黑的，那就当根节点（黑色）

     2）、如果树不是空的，则会找到父节点进行插入，以红节点进行插入：（这里就分好几种情况）

         （1）、第一种情况：

             父节点是红色的，叔叔节点存在，且也为红色

             这种情况（例）：

                          O (黑）     

                       |      |

                 （红）O      O（红）

                    |        |
 
             （黑） O        O （黑）

                  |   |

           （红）O     O（红）

                |

                O ―――》这个就是插入的节点 （红）


     红黑树有一个性质，就是红节点的子节点只能是黑节点，上面就违反了这个性质，所以要进行平衡，旋转或者变色。

这种情况，要将父节点和叔叔节点先变黑：

                        O (黑）     

                       |      |

                 （红）O      O（红）

                    |        |
 
             （黑） O        O （黑）

                  |   |

           （黑）O     O（黑）  // 注意：这里变黑了

                |

         （红） O  

   又要保证红黑数的另一个性质，就是任意一结点到每个叶子结点的路径都包含数量相同的黑结点。

   为保证这个节点，要继续向上走，继续旋转或者变色

                                    O (黑）     

                                 |      |

                           （红）O      O（红）

                              |        |
 
  // 注意：这里变红了 （红） O        O （黑）

                           |   |

                    （黑）O     O（黑） 

                        |

                 （红） O  
    
    保证了刚刚的性质：任意一结点到每个叶子结点的路径都包含数量相同的黑结点。

    又违反了另外一个性质：红节点的子节点必须为黑节点

                                    O (黑）     

                                 |      |

      // 注意：这里变黑了 （黑）O      O（红）

                              |        |
 
                       （红） O        O （黑）

                           |   |

                    （黑）O     O（黑） 

                        |

                 （红） O  
 
 这样就可以了。

        （2）、第二种情况：叔叔节点不存在，或者为黑

               例：（叔叔不存在）

                            O （黑）祖父

                           |   

                    （红）O    //父亲变色，再右旋

                        |

                 （红） O  ――――》 插入的子节点


   
               进行旋转和变色：


                              O （黑）父亲

                           |     |

        【子节点】  （红） O     O  （红） 【原来的祖父】

                例：（叔叔为黑）
                      
                              O （黑）祖父

                           |     |

                    （红）O      O  (黑）叔叔

                        |

                 （红） O 

                进行旋转和变色：

                            
                              O （黑）父亲

                           |     |

        【子节点】  （红） O     O  （红） 【原来的祖父】

                                   |

                                    O  （黑）【原来的叔叔】

上面讲的是父亲为左孩子的情况，父亲为右孩子：（则是左旋）

   例：（叔叔不存在）

                               O （黑）祖父

                                 |

                                 O  （红） 父亲

                                   |

                                    O （红）子节点

   旋转和变色：

                             O （黑）父亲

                           |     |

        【原来的祖父】  （红） O     O  （红） 【子节点】

    例：（叔叔为黑）

                              O （黑）父亲

                           |     |

        【原来的祖父】  （红） O     O  （红） 【子节点】

                         |

   【原来的叔叔】 （黑）O        


       （3）、第三种情况：

              父亲为左孩子（红），插入的节点为右孩子，叔叔不存在或为黑

        例：（叔叔不存在）

                     O (黑）祖父

                  |

      父亲（红）  O

                    |

                     O  ――》插入的子节点（红）            

       先将父亲节点左旋，再将祖父节点右旋（违反了红节点的子节点只能为黑节点的性质）

       左旋： 
                    O (黑）祖父

                  |

                  O  （红）【原来的子节点变成了父节点】

                |

                O  （红）【原来的父节点变成了子节点】

       再将祖父节点右旋和变色：


                              O （黑）【原来的子节点】

                           |     |
                   
    【原来的父节点】（红） O     O （红）【原来的组父节点】



     例：（叔叔为黑）

                      O  （黑）祖父

                 |        |

    父节点（红） O        O （黑）叔叔

                   |

                    O ――》插入的子节点（红）
 
     这种情况和上面是一样的，先父节点左旋，再祖父节点右旋和变色：

     先父节点左旋：


                                       O   （黑）祖父

                                    |     |
 
 【原来的子节点变成了父节点】（红） O     O （黑）叔叔

                                  |

                                  O  （红）【原来的父节点变成了子节点】


     再祖父节点右旋和变色：

                                         O  （黑）【原来的子节点】

                                     |      |

              【原来的父节点】（红） O      O  （红） 【原来的组父节点】
 
                                              |

                                               O  （黑）叔叔


      4）、第四种情况：
 
           父亲为右孩子，要插入的子节点为左孩子，叔叔不存在或为黑：

         例：（叔叔不存在）

                            O (黑）祖父

                              |   

                              O （红）父亲

                          |

                          O ――》（红）要插入的子节点

         先将父节点右旋，再将祖父节点左旋和“ 子节点 ”变色:

         将父节点右旋:

                         O  (黑）祖父

                           |   

                            O  （红）【原来的子节点变成了父节点】

                              |

                               O  （红）【原来的父节点变成了子节点】

       再将祖父节点左旋和“ 子节点 ”变色（祖父节点一样要变色）:


                                      O （黑）【原来的子节点】

                                  |      |      
        
          【原来的祖父节点】（红）O      O （红）【原来的父节点】

      例：（叔叔为黑）：

                             O (黑）祖父

                          |     |   

               叔叔（黑） O     O （红）父亲

                                  |

                                   O ――》（红）要插入的子节点

     先将父节点右旋，再将祖父节点左旋和“ 子节点 ”变色（祖父节点一样要变色）:

         将父节点右旋:   

                            O（黑）祖父

                          |    |

                叔叔（黑）O     O (红）【原来的子节点】

                                 |

                                  O （红）【原来的父节点】


       再将祖父节点左旋和“ 子节点 ”变色（祖父节点一样要变色）:

                                  O  (黑）【原来的子节点】

                              |      |

      【原来的祖父节点】（红）O      O  （红）【原来的父节点】

                            |

    【原来的叔叔节点】（黑）O
 







































































                           