

                  《――――――――――――网络编程――――――――――――》


【1】、网络编程：（这里主讲TCP/IP协议和HTTP协议）――》Java网络类只工作在应用层和传输层上

    1）、实现基于TCP的服务端/客户端：

       代码演示：

             先是服务端：

               import java.io.IOException;

               import java.io.InputStream;

               import java.net.ServerSocket;

               import java.net.Socket;

               import java.net.UnknowHostException;

               public class Server{

                   public static void main(String [] args) throws IOException,UnknowHostException{

                             ServerSocket server=new ServerSocket(8888);

                             System.out.println("等待连接...");

                             Socket soc=server.accept();

                             System.out.println("连上了！！！");

                             InputStream in=soc.getInputStream();

                             byte [] a=new byte[300];

                             int b=in.read(a);

                             System.out.println(new String(a,0,b));

                             //上面也可以包装成字符流，更加方便

                             InputStreamReader in1=new InputReader(in);

                             int len;

                             char [] bu=new char[100];

                             while((len=a2.read(bu))!=-1){

                                      System.out.println(new String(bu,0,len));

                             }


                             soc.close();

                             server.close();

                      }

                   }

               再是客户端：

               import java.io.IOException;

               import java.io.OutputStream;

               import java.net.Socket;

               import java.net.UnknowHostException;

               public class Server{

                   public static void main(String [] args) throws IOException,UnknowHostException{

                             Socket ser=new Socket("127.0.0.1",8888);

                             OutputStream a=ser.getOutputStream();

                             a.write("你好，服务器".getBytes());  //向服务器写东西，记得转换为字节，因为这是

                                                                    输出字节流

                             soc.close();

                             server.close();

                      }

                   }

      注意：

             它们也可以反着来，服务器向客户端写东西，但是它们就是不能两者共存。

    也就是：

           服务器端：

              import java.net.Socket;

              import java.net.ServerSocket;

              import java.io.IOException; 

              import java.net.UnknownHostException;

              import java.io.OutputStream;

              public class A{

                    public static void main(String [] args)throws IOException,UnknownHostException{

                          ServerSocket ser=new ServerSocket(7777);

                          System.out.println("等待连接...");

                          Socket a=ser.accept();

                          System.out.println("连上了！！！");

                          System.out.println("我也向你问候");

                          OutputStream a3=a.getOutputStream();

                          a3.write("你也好啊".getBytes());

                          a3.flush();

                          a3.close();

                          a.close();

                          ser.close();

                     }

                 }

                客户端：

                import java.io.InputStream;

                import java.io.InputStreamReader;

                import java.net.Socket;

                import java.io.IOException;

                import java.net.UnknownHostException;

                public class B{

                    public static void main(String [] args)throws IOException,UnknownHostException{

                         Socket a=new Socket("127.0.0.1",7777);

                         System.out.println("等待回信");

                         InputStream a2=a.getInputStream();

                         InputStreamReader a3=new InputStreamReader(a2);

                         int len;

                         char [] bu=new char[100];

                         while((len=a3.read(bu))!=-1){

                                  System.out.println(new String(bu,0,len));

                          }

                         a.close();

                     }
                 }

――――――――――――――――――――――――――――――――――》

      2）、HTTP协议：

           这个你要慢慢研究了：

                 import java.io.BufferedReader;

                 import java.io.File;

                 import java.io.FileInputStream;

                 import java.io.IOException;

                 import java.io.InputStreamReader;

                 import java.io.OutputStream;

                 import java.net.ServerSocket;

                 import java.net.Socket;

                 public class MyWebServer {
	
	             /*

	              * 对于tcp协议来说，服务器用ServerSocket来实现

	              * */

	               public static void main(String[] args) throws IOException {

		           //创建ServerSocket

		             ServerSocket server = new ServerSocket(8080);
		
		          //接受请求

		             Socket socket = server.accept();
		
		          //InputStreamReader转换流，将字节数据根据默认编码转换成字符流

		       BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		 
		         //获得地址当中对应的文件/index.html :GET /index.html HTTP/1.1

		             String line = br.readLine();

		             System.out.println(line);

		             String fileName = "";

		         if(null==line) {

			          fileName="/index.html";

		         }else {

			          fileName = line.split(" ")[1];
		         }
		
		File file = new File("e:/webapp"+fileName);
		
		//拿到网络输出流，将文件输入流数据写到输出流中

		OutputStream os = socket.getOutputStream();
		
		if(file.exists()) {

			//开启一个读取本地硬盘文件的输入流，去获取对应的html文件

			FileInputStream fis = new FileInputStream(file);
			
			//按照http协议书写响应头

			os.write("HTTP/1.1 200 OK\r\n".getBytes()); //响应行

			os.write("\r\n".getBytes());//空行
			
			//下面输出html文件内容，正文内容叫响应体。

			int len= 0;

			byte[] buff = new byte[1024];
			
			while((len=fis.read(buff))!=-1) {

				os.write(buff,0,len);
			}

                 }else {

			//如果文件不存在，我就会写404

			//先响应行

			os.write("HTTP/1.1 404 not found\r\n".getBytes());

			//响应头

			os.write("Content-type:text/html\r\n".getBytes());

			//空行

			os.write("\r\n".getBytes());

			//响应体

			os.write(("<html>"

					+ "<head>"

					+ "</head>"

					+ "<body>"

					+ "<h1 style='color:red'>your request page can not found</h1>"

					+ "</body>"

					+ "</html>").getBytes());

		}

		socket.close();

		server.close();
		
	}
}

――――――――――――――――――――――――》

       【1】、网络编程：

                 1）、一般的网络编程都称为Socket编程，Socket的英文意思是“插座”。

                 2）、两台电脑都安装上一个插座，然后使用一根线的两端插到两台电脑的插座上，这样两台电脑就建立好了

连接。这个插座就是Socket。（只是为了便于你了解，真实情况可不是这样）

                 3）、因为互相之间都能互相通信，我说你是我的Server只是从逻辑意义上来讲，我应该把东西先发到你那里

去，然后由你来处理，转发。所以你叫Server。

                      但从技术意义上来讲，只有TCP才会分Server和Client。

                      对于UDP来说，从严格意义上来讲，并没有所谓的Server和Client。

                      TCP的Server的插座就叫ServerSocket，Client的插座就叫Socket。两台计算机互相连接，那么首先必

须得知道它们的IP地址，但是只提供IP地址是不够的，还必须要有连接的端口号，也就是要连接到哪个应用程序上。

                 4）、端口号是用来区分一台机器上不同的应用程序的。端口号在计算机内部是占2个字节。一台机器上最多

有65536个端口号。一个应用程序可以占用多个端口号。

                      端口号如果被一个应用程序占用了，那么其他的应用程序就无法再使用这个端口号了。记住一点，

我们编写的程序要占用端口号的话占用1024以上的端口号，1024以下的端口号不要去占用，因为系统有可能会随时征用。

                      端口号本身又分为TCP端口和UDP端口，TCP的8888端口和UDP的8888端口是完全不同的两个端口。

TCP端口和UDP端口都有65536个。
     

       【2】、来补一下网络编程之HTTP协议：

              1）、TCP/IP 通信传输流:

                   利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，

接收端则从链路层往上走。

                   具体的走向：

                       （1）、首先作为发送端的客户端在应用层（HTTP 协议）发出一个想看某个 Web 页面的 HTTP 请求；

                       （2）、接着，为了传输方便，在传输层（TCP 协议）把从应用层处收到的数据（HTTP 请求报文）

进行分割，并在各个报文上打上标记序号及端口号后转发给网络层；

                       （3）、在网络层（IP 协议），增加作为通信目的地的 MAC 地址后转发给链路层。这样一来，发往

网络的通信请求就准备齐全了；

                       （4）、接收端的服务器在链路层接收到数据，按序往上层发送，一直到应用层。当传输到应用层，

才能算真正接收到由客户端发送过来的 “ HTTP请求 ”。

                      （发送端每通过一层，增加那一层的首部，而接收端每通过一层则删除那一层的首部）

             2）、在网络体系结构中，包含了众多的网络协议，这里就讲 HTTP 协议（HTTP/1.1版本）：

                  HTTP协议（HyperText Transfer Protocol，超文本传输协议）是用于从WWW服务器传输超文本到本地浏览器

的传输协议。它可以使浏览器更加高效，使网络传输减少。

                  HTTP是客户端浏览器或其他程序与Web服务器之间的应用层通信协议。在Internet上的Web服务器上存放的都

是超文本信息，客户机需要通过HTTP协议传输所要访问的超文本信息。

             我们在浏览器的地址栏里输入的网站地址叫做URL (Uniform Resource Locator，统一资源定位符)。就像每

家每户都有一个门牌地址一样，每个网页也都有一个Internet地址。当你在浏览器的地址框中输入一个URL或是单击一个超级链接

时，URL就确定了要浏览的地址。

                  浏览器通过超文本传输协议(HTTP)，将Web服务器上站点的网页代码提取出来，并翻译成漂亮的网页。

             3）、HTTP工作过程：

                  （1）、HTTP请求响应模型：


                         ――       请求             ――
                        |    |  ――――――》      |    |
                        |    |  《――――――      |    |
                         ――       响应             ――
                        
                        客户端                       服务器


                  （2）、HTTP通信机制是在一次完整的 HTTP 通信过程中，客户端与服务器之间将完成下列7个步骤：

                      【1】、建立 TCP 连接：在HTTP工作开始之前，客户端首先要通过网络与服务器建立连接，该连接

是通过 TCP 来完成的，该协议与 IP 协议共同构建 Internet，即著名的 TCP/IP 协议族，因此 Internet 又被称作是 TCP/IP

 网络。

                             HTTP 是比 TCP 更高层次的应用层协议，根据规则，只有低层协议建立之后，才能进行高层

协议的连接，因此，首先要建立 TCP 连接，一般 TCP 连接的端口号是80；

                      【2】、客户端向服务器发送请求命令：一旦建立了TCP连接，客户端就会向服务器发送请求命令；

                                例如：GET/sample/hello.jsp HTTP/1.1；

                                      上面这一行是“ 请求行 ”。

                                      请求行的格式：请求方法 URL 协议版本号

                      【3】、客户端发送“ 请求头 ”信息：

                                  客户端发送其请求命令之后，还要以头信息的形式向服务器发送一些别的信息，之后

客户端发送了一“ 空白行 ”来通知服务器，它已经结束了该头信息的发送；

                      【4】、服务器应答：客户端向服务器发出请求后，服务器会客户端返回响应；

                                例如： HTTP/1.1 200 OK  

                                       “ 响应行 ”格式：协议的版本号 响应状态码

                      【5】、服务器返回“ 响应头 ”信息：正如客户端会随同请求发送关于自身的信息一样，服务器也会

随同响应向用户发送关于它自己的数据及被请求的文档；

                      【6】、服务器向客户端发送数据：服务器向客户端发送头信息后，它会发送一个“ 空白行 ”来表示

头信息的发送到此为结束，接着，它就以 “ Content-Type 响应头信息 ”所描述的格式发送用户所请求的实际数据；

                      【7】、服务器关闭 TCP 连接：一般情况下，一旦服务器向客户端返回了请求数据，它就要关闭 TCP

连接，然后如果客户端或者服务器在其头信息加入了这行代码 Connection:keep-alive ，TCP 连接在发送后将仍然保持打开状

态，于是，客户端可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。

            4）、HTTP 协议报文结构：

                 （1）、HTTP 报文:

                        用于 HTTP 协议交互的信息被称为 HTTP 报文。

                        请求端（客户端）的 HTTP 报文叫做请求报文；

                        响应端（服务器端）的叫做响应报文。

                        HTTP 报文本身是由多行（用 CR+LF 作换行符）数据构成的字符串文本。

                 （2）、HTTP 报文结构

                        HTTP 报文大致可分为报文首部和报文主体两部分。两者由最初出现的空行（CR+LF）来划分。

通常，并不一定有报文主体。

                 （3）、请求报文

                        请求报文的首部内容由以下数据组成：

                        请求行 ―― 包含用于请求的方法、请求 URI 和 HTTP 版本；【 请求行 】

                        首部字段 ―― 包含表示请求的各种条件和属性的各类首部。（通用首部、请求首部、实体首部以

及RFC里未定义的首部如 Cookie 等）。【 请求头 】

                        下面就是空行和请求体。【完整的请求报文】

    请求报文的示例，如下：（ 这里是百度网址的请求报文 ）

                         GET https://www.baidu.com/favicon.ico HTTP/1.1  【 请求行 】

                         Host: www.baidu.com  【 请求头 】

                         User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:68.0) Gecko/20100101 Firefox/68.0
        
                         Accept: image/webp,*/*

                         Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2

                         Accept-Encoding: gzip, deflate, br

                         Connection: keep-alive

                         Cookie: BAIDUID=72D4B896082B0E19DD7AE1FEBBDAD13A:FG=1; BIDUPSID=99C429F86BFB63B667910D
 
                         \r\n    【 空行 】
                  
                   （4）、响应报文：

                          响应报文的首部内容由以下数据组成：
         
                          状态行 ―― 包含表明响应结果的状态码、原因短语和 HTTP 版本；【 响应行 】

                          首部字段 ―― 包含表示请求的各种条件和属性的各类首部。（通用首部、响应首部、实体首部以

及RFC里未定义的首部如 Cookie 等）。 【 响应头 】 

                           下面就是空行和响应正文。【完整的响应报文】

                      响应报文的示例，如下：（这里是百度网址的响应报文）

                            HTTP/1.1 200 OK  【 响应行】

                            Accept-Ranges: bytes 【 响应头 】

                            Connection: Keep-Alive

                            Content-Encoding: gzip

                            Content-Length: 984

                            Content-Type: image/x-icon

                            Date: Sun, 01 Sep 2019 00:54:33 GMT

                            Etag: "423e-55c8139094a40"

                            Last-Modified: Fri, 27 Oct 2017 06:16:01 GMT

                            Server: Apache

                            Vary: Accept-Encoding,User-Agent

                            \r\n  【 空行 】

                            <html>......   【 正文 】


――――――――――――――――――――――――――――》


再放一篇完整的网络编程的文章：

             https://www.cnblogs.com/imstudy/p/9188412.html

里面内容很完整，可以看看



――――――――――――――――――――――――――――――――――――――――――――――》

【1】再补一点相关的知识：

        1）、关于HTTP请求行中请求方法：【请求行格式：请求方法（请求格式）地址 协议版本 】

                 在HTTP/1.1协议中，定义了8种发送http请求的方法：

                         
GET、POST、OPTIONS、HEAD、PUT、DELETE、TRACE、CONNECT、PATCH
 

                 根据HTTP协议的设计初衷，不同的方法对资源有不同的操作方式

                         
PUT ：增
 

                         DELETE ：删 

                         
POST：改 

                         
GET：查


                 但最常用的是“ GET ”和“ POST ”（实际上GET和POST都能办到增删改查）

       2）、“ get ”和“ post ”请求
：

             要想使用GET和POST请求跟服务器进行交互，得先了解一个概念：

                       参数就是传递给服务器的具体数据，比如登录时的帐号、密码

             
GET和POST对比：

                       GET和POST的主要区别表现在数据传递上
“ GET ”
在请求URL后面以?的形式跟上发给服务器的参数，

多个参数之间用&隔开，比如http://ww.test.com/login?username=123&pwd=234&type=JSON


      注意：由于浏览器和服务器对URL长度有限制，因此在URL后面附带的参数是有限制的，通常不能超过1KB

             
POST
发给服务器的参数全部放在请求体中
理论上，POST传递的数据量没有限制（具体还得看服务器的处理能力）


        3）、GET和POST的选择
：

                 （1）如果要传递大量数据，比如文件上传，只能用POST请求


                 （2）GET的安全性比POST要差些，如果包含机密\敏感信息，建议用POST


                 （3）如果仅仅是索取数据（数据查询），建议使用GET


                 （4）如果是增加、修改、删除数据，建议使用POST






――――――――――――――――――――――――――――――――――――――――――――――》









































